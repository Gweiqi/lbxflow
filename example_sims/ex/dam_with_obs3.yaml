version: 1.0.0

# code to execute before parsing
preamble: >
  @init_plot_env();
  using Base.Test;
  const F = [0.0; -2.5e-6];
  const nsteps  = 120000;
  const datadir = joinpath("data","dam_with_obs3");
  const ni = 64;
  const nj = 64;
  const nu = 0.2;
  const constit_rel_f = init_constit_srt_const(nu);
  const forcing_kf = init_sukop_gravity_Fk(F);

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,     expr: false }
nu:       { value: nu,      expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
simtype:  free_surface
nsteps:   { value: nsteps,   expr: true }
col_f:    BGK_F(constit_rel_f, forcing_kf);

# obstacles
obstacles:
  - type:   bounce_back
    coords: "[48; 54; 8; 16]" 

# boundary conditions
bcs:
  - west_bounce_back!
  - east_bounce_back!
  - south_bounce_back!
  - north_bounce_back!

# free surface conditions
rho_g: 1.0

fill_x: { value: 0.5, expr: false }
fill_y: { value: 1.0, expr: false }

# callback functions
callbacks:
  - print_step_callback(50, "free-surf")
  - plot_mass_contours_callback(250, joinpath(datadir, "mass"), [(8, 16, 48/ni, 54/ni)])

# clean-up, backup, write out
finally:
  - >
    (sim::FreeSurfSim, k::Int) -> begin
      @assert(k == nsteps, "There was an error that ended the simulation early");
      for m in sim.tracker.M
        @assert(-100 < m < 100, "Mass was numerically unstable");
      end
      for u in sim.msm.u
        @assert(-100 < u < 100, "Velocity was numerically unstable");
      end
      for ρ in sim.msm.rho
        @assert(-100 < ρ < 100, "ρ was numerically unstable");
      end
      for f in sim.lat.f
        @assert(-100 < f < 100, "f was numerically unstable");
      end
      for ϵ in sim.tracker.eps
        @assert(-10 < ϵ < 10, "ϵ was numerically unstable");
      end
      print_with_color(:green, "TEST PASSED\n");
    end 
