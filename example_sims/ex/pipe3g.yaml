version: 1.0.0

preamble: >
  @init_plot_env();
  const datadir       =   joinpath("data", "pipe3g");
  const nu            =   0.2;
  const constit_rel_f =   init_constit_srt_const(nu);
  const F             =   [0.0; -5.0e-6];
  const forcing_kf    =   init_sukop_gravity_Fk(F);
  const ni            =   64;
  const nj            =   16;
  const nsteps        =   20000;

# data directory
datadir:    {   value: datadir,       expr: true    }

# material properties
rho_0:      {   value: 1.0,           expr: false   }
nu:         {   value: nu,            expr: true    }

# lattice parameters
dx:         {   value: 1.0,           expr: false   }
dt:         {   value: 1.0,           expr: false   }
ni:         {   value:  ni,           expr: true    }
nj:         {   value:  nj,           expr: true    }

# simulation parameters
simtype:    free_surface
col_f:      BGK_F(constit_rel_f, forcing_kf);
nsteps:     {   value: nsteps,        expr: true   }

obstacles:
  - type:   bounce_back
    coords: "[24 28 2 6; 24 28 10 14]'" 

# boundary conditions
bcs:
  - south_bounce_back!
  - north_bounce_back!
  - FastAnonymous.@anon (sim) -> west_mass_inlet!(sim, 1.0)
  - FastAnonymous.@anon (sim) -> west_velocity!(sim.lat, 0.005)
  - east_mass_outlet!

# free surface conditions
rho_g: 1.0

fill_x: { value: 0.1, expr: false }
fill_y: { value: 1.0, expr: false }

# callback functions
callbacks:
  - print_step_callback(50, "free-surf")
  - plot_mass_contours_callback(100, joinpath(datadir, "mass"), [(2, 6, 24/ni, 28/ni), (10, 14, 24/ni, 28/ni)]; levs=[-0.5; 0.0; 0.5; 1.0; 1.5; 2.0; 2.5])
  - write_jld_file_callback(datadir, 500)

# clean-up, backup, write out
finally:
  - >
    (sim::FreeSurfSim, k::Int) -> begin
      @assert(k == nsteps, "There was an error that ended the simulation early");
      for m in sim.tracker.M
        @assert(-100 < m < 100, "Mass was numerically unstable");
      end
      for u in sim.msm.u
        @assert(-100 < u < 100, "Velocity was numerically unstable");
      end
      for ρ in sim.msm.rho
        @assert(-100 < ρ < 100, "ρ was numerically unstable");
      end
      for f in sim.lat.f
        @assert(-100 < f < 100, "f was numerically unstable");
      end
      for ϵ in sim.tracker.eps
        @assert(-10 < ϵ < 10, "ϵ was numerically unstable");
      end
      print_with_color(:green, "TEST PASSED\n");
    end
  - plot_mass_contours_callback(1, joinpath(datadir, "mass"))
  - write_jld_file_callback(datadir)
