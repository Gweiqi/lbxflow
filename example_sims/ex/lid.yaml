version: 0.2.1

# code to execute before parsing
preamble: >
  const id = "lid";
  const datadir = joinpath("data","ex-lid");
  const ni = 256;
  const nj = 256;
  const U = 1.00;
  const mu_p = 2.56;
  const Re = U * ni / mu_p;
  info("Re = $Re");
  using PyPlot;
  const constit_rel_f = init_constit_srt_const(mu_p);

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,       expr: false }
nu:       { value: mu_p,      expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
simtype:    default
nsteps:     { value: 40000,   expr: false }
col_f:      init_col_srt(constit_rel_f)

# boundaries
sbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

# boundary conditions
bcs:
  - >
    begin;
      curry_lid_driven!(lat) = lid_driven!(lat, U);
      return curry_lid_driven!;
    end
  - south_bounce_back!
  - east_bounce_back!
  - west_bounce_back!

# callback functions
callbacks:
  - print_step_callback(50, id)
  - write_jld_file_callback(datadir, 500)
  - plot_streamlines_callback(15, 0.0)

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Int) -> begin
      const ni, nj = size(sim.msm.u, 2), size(sim.msm.u, 3);
      const xs = linspace(0, 1.0, ni);
      const ys = linspace(0, 1.0, nj);
      writedlm(joinpath(datadir, "u.dsv"), transpose(sim.msm.u[1,:,:]), ",");
      writedlm(joinpath(datadir, "v.dsv"), transpose(sim.msm.u[2,:,:]), ",");
      writedlm(joinpath(datadir, "u_midcav.dsv"), [vec(sim.msm.u[1,round(ni/2),:]) ys], ",");
      writedlm(joinpath(datadir, "v_midcav.dsv"), [xs vec(sim.msm.u[2,:,round(nj/2)])], ",");
    end
  - write_jld_file_callback(datadir)
  - plot_streamlines_callback(1, joinpath(datadir, "sl.png"), 0.0)
