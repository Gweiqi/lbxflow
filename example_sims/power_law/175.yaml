version: 0.2.4

# code to execute before parsing
preamble: >
  const pgrad = -5.0e-5;
  const F = [-pgrad; 0.0];
  const datadir = joinpath("data","power_law","1.75");
  const nsteps = 12000;
  const ni = 25;
  const nj = 80;
  const mu = 2/11;
  const n = 1.75;
  const constit_rel_f = init_constit_mrt_power_law_implicit(mu, n, 1e-9, 100, 1e-9);
  const forcing_kf = init_korner_Fk(F);

# data
datadir:  { value: datadir, expr: true  }

# material properties
rho_0:    { value: 1.0,     expr: false }
nu:       { value: mu,     expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
nsteps:   { value: 10000,   expr: false }
col_f:    init_col_mrt(constit_rel_f, forcing_kf, S_luo);

# boundaries
sbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - periodic_east_to_west!

callbacks:
  - print_step_callback(50) 
  - write_jld_file_callback(datadir, convert(Int64, round(nsteps/20)))

# clean-up, backup, write out
finally:
  - write_jld_file_callback(datadir)
  - >
    (sim::Sim, k::Int) -> begin
      writedlm(joinpath(datadir, "ux_profile.dsv"), 
        extract_ux_prof_callback(convert(Int64, round(ni/2)))(sim), 
        ",");
    end
  - >
    (sim::Sim, k::Int) -> begin
      writedlm(joinpath(datadir, "ubar_profile.dsv"), 
        extract_ubar_prof_callback(convert(Int64, round(ni/2)))(sim), 
        ",");
    end  

# test for conditions to end simulation
test_for_term: is_steadystate_x
