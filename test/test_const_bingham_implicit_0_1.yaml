version: 0.2.1

# code to execute before parsing
preamble: >
  using Base.Test;
  const pgrad = 1.502e-4;
  const F = [-pgrad; 0.0];
  const datadir = "data";
  const ni = 40;
  const nj = 28;
  const mu = 1/5;
  const constit_rel_f = init_constit_srt_bingham_implicit(mu, 0.0, 1e6, 1.e-8, rand(10:50), rand(1.e-7:1.e-7:1.e-2));
  const forcing_kf = init_korner_Fk(F);
  const h = (nj-1)/2.0;
  analytic_soln(xs) = begin;
    result = zeros(length(xs));
    for (i, x) in enumerate(xs) 
      result[i] = -1.0 / (2.0 * mu) * pgrad * (h^2 - x^2);
    end
    return result;
  end;

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,     expr: false }
nu:       { value: 1/6,     expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
nsteps:   { value: 10000,   expr: false }
col_f:    init_col_srt!(constit_rel_f, forcing_kf);

# boundaries
sbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]'"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - periodic_east_to_west!

callbacks:
  - print_step_callback(25) 

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Int) -> begin
      xs = zeros(nj);
      for i = 1:nj
      xs[i] = (i - nj/2 - 0.5);
      end
      us = analytic_soln(xs);
      i = int(round(ni/2));
      for j = 1:nj
        println("analyt == lbm ? $(us[j]) == $(sim.msm.u[1,i,j])"); 
        @test_approx_eq_eps us[j] sim.msm.u[1,i,j] 5e-3
      end
      println("TEST PASSED");
    end 

# test for conditions to end simulation
test_for_term: is_steadystate_x
