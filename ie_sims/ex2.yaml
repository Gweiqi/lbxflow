# code to execute before parsing
preamble: >
  const pgrad = -1.102e-3;
  const f = [-pgrad; 0.0];
  const datadir = "data/sukop";
  const ni = 20;
  const nj = 12;

# data
datadir:  { value: datadir, expr: true  }

# material properties
# TODO: specify constitutive model type (general Newtonian, Newtonian, etc.)
rho_0:    { value: 1.0,     expr: false }
nu:       { value: 1/6,     expr: true  }

# lattice parameters
dx:       { value: 1.0,     expr: false }
dt:       { value: 1.0,     expr: false }
ni:       { value: ni,      expr: true  }
nj:       { value: nj,      expr: true  }

# simulation parameters
nsteps:   { value: 10000,   expr: false }
col_f: >
  begin;
    bind_srt_col_f!(lat, msm, bounds) = srt_guo_col_f!(lat, msm, f, bounds);
    return bind_srt_col_f!
  end;

# boundaries
sbounds:
  value: "[1 ni 1 nj;]"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - periodic_east_to_west!

# callback functions
callbacks:
  - print_step_callback(25, "ex2")
  - write_backup_file_callback(datadir, 500)

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Int) -> begin
      writedlm(joinpath(datadir, "ux_profile.dsv"), 
        extract_ux_prof_callback(convert(Int64, round(ni/2)))(sim), 
        ",");
    end
  - write_backup_file_callback(datadir)

# test for conditions to end simulation
test_for_term: is_steadystate_x
