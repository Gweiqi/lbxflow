# author:         
#  name:         Matthew Grasinger
#  email:        grasingerm at gmail dot com
#
# date-created:   2015-06-12
#
# description: >
#   Poiseuille bingham plastic flow for verification. Based on parameters from
#   Wang et. al. 2008, Lattice boltzmann modeling of Bingham plastics. Yield
#   stress is 5.0e-3


preamble: >
  const ni = 102;
  const nj = 42;
  const rhoi = 1.5;
  const rhoo = 0.5;
  const mu_p = 1/6;
  const tau_y = 5.0e-3;
  const m = 1.0e8;
  const max_iters = 11;
  const tol = 1e-3;
  const relax = 0.8;
  const nsteps = 20000;
  const id = "poise-wang-e-0005";
  const datadir = joinpath("data","poise","wang","explicit","0005");

datadir:    { value: datadir,   expr: true    }

# material init
rho_0:      { value: 1.0,       expr: false   }
nu:         { value: mu_p,      expr: true    }

# lattice configuration
dx:         { value: 1.0,       expr: false   }
dt:         { value: 1.0,       expr: false   }
ni:         { value: ni,        expr: true    }
nj:         { value: nj,        expr: true    }

# simulation parameters
nsteps:     { value: nsteps,    expr: true    }
col_f: >
      begin;
        binded_col_f!(lat, msm, bounds) = mrt_bingham_explicit_col_f!(lat,
          msm, vikhansky_relax_matrix, mu_p, tau_y, m, 1.0e-11, bounds, relax);
        return binded_col_f!;
      end

# boundaries
sbounds:
  value: "[1 ni 1 nj;]"
  expr: true

cbounds:
  value: "[1 ni 1 nj;]"
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - >
    begin;
      bind_west_pressure!(lat) = west_pressure!(lat, rhoi);
      return bind_west_pressure!;
    end
  - >
    begin;
      bind_east_pressure!(lat) = east_pressure!(lat, rhoo);
      return bind_east_pressure!;
    end

# callback functions
callbacks:
  - print_step_callback(100, id)
  - write_backup_file_callback(datadir, convert(Int64, round(nsteps/20)))

# clean-up, backup, write out
finally:
  - >
    (sim::Sim, k::Int) -> begin
      writedlm(joinpath(datadir, "ux_profile.dsv"), 
        extract_ux_prof_callback(convert(Int64, round(ni/2)))(sim), 
        ",");
    end
  - write_backup_file_callback(datadir)

# test for conditions to end simulation
test_for_term: is_steadystate_x
