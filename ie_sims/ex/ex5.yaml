preamble: >
  using PyPlot;
  const id = "street";
  const u = 0.05;
  const datadir = joinpath("data", id);
  const ni = 275;
  const nj = 50;

datadir:    {   value:  datadir,    expr:   true  }

rho_0:      {   value:  1.0,        expr:   false }
nu:         {   value:  0.2,        expr:   false }

dx:         {   value:  1.0,        expr:   false }
dt:         {   value:  1.0,        expr:   false }
ni:         {   value:  ni,         expr:   true  }
nj:         {   value:  nj,         expr:   true  }

nsteps:     {   value: 100000,      expr:   false }
col_f:  srt_col_f!

sbounds:
  value: >
    [1    50    1     nj;
     50   95    1     14;
     50   95    36    nj;
     95   ni    1     nj]
  expr: true

cbounds:
  value: >
    [1    50    1     nj;
     50   95    1     14;
     50   95    36    nj;
     95   ni    1     nj]
  expr: true

# boundary conditions
bcs:
  - north_bounce_back!
  - south_bounce_back!
  - >
    begin;
      bind_west_inlet!(lat::Lattice) = west_inlet!(lat, u);
      return bind_west_inlet!;
    end
  - >
    begin;
      bind_east_pressure!(lat::Lattice) = east_pressure!(lat, 1.0);
      return bind_east_pressure!;
    end
  - >
    begin;
      obstacle_bounce_back!(lat::Lattice) = begin;
        north_bounce_back!(lat, 50, 95, 14);
        west_bounce_back!(lat, 50, 14, 36);
        south_bounce_back!(lat, 50, 95, 36);
        east_bounce_back!(lat, 95, 14, 36);
      end
      return obstacle_bounce_back!;
    end
# callback functions
callbacks:
  - plot_streamlines_callback(10, joinpath(datadir, "s1"), 0.0)
  - print_step_callback(100, id)
  - write_backup_file_callback(datadir, 500)

# clean-up, backup, write out
finally:
  - plot_streamlines_callback(1, joinpath(datadir, "sl"), 0.0);
  - write_backup_file_callback(datadir)
