version: 0.2.1

preamble: >
  using PyPlot;
  const datadir = joinpath("data","freesurf");
  const F = [0.0; -2.0e-2];
  const ni = 50;
  const nj = 50;

# data directory
datadir:    {   value: datadir,       expr: true    }

# material properties
rho_0:      {   value: 1.0,           expr: false   }
nu:         {   value: 0.2,           expr: false   }

# lattice parameters
dx:         {   value: 1.0,           expr: false   }
dt:         {   value: 1.0,           expr: false   }
ni:         {   value:  ni,           expr: true    }
nj:         {   value:  nj,           expr: true    }

# simulation parameters
simtype:    free_surface
col_f: >    
            begin;
              bind_col_srt!(sim::FreeSurfSim, bounds::Matrix{Int64}) = (
                col_srt_korner!(sim, F, bounds));
              return bind_col_srt!;
            end
nsteps:     15000

# boundaries
sbounds:
  value:  "[1 ni 1 nj;]'"
  expr:   true

cbounds:
  value:  "[1 ni 1 nj;]'"
  expr:   true

# boundary conditions
bcs:
  - west_bounce_back!
  - east_bounce_back!
  - south_bounce_back!
  - north_bounce_back!

# free surface conditions
rhog: 1.0

states:
  value: >
    begin;
      s = Array(Union(Gas, Interface, Fluid), ni, nj);
      fill!(s, GAS);
      for j=1:nj
        for i=1:(int(ni/2))
          s[i,j] = FLUID;
        end
        s[(int(ni/2))+1,j] = INTERFACE;
      end
      return s;
    end
  expr: true

# callback functions
#  - plot_mass_contours_callback(10, "mass", 0.0)
callbacks:
  - plot_mass_contours_callback(1)
  - print_step_callback(1, "free-surf")
  - >
    (sim::FreeSurfSim, k::Int) -> begin;
      if k % 5 == 0
        println(sim.tracker.M);
      end
    end;
  - pause_sim_callback(1)
  - write_jld_file_callback(datadir, 300)

# clean-up, backup, write out
#finally:
  #- write_jld_file_callback(datadir)
