- "": "version: 1.0.0"

#!! nj           =  128
#!! ni           =  32
#!! nsteps       =  25000
#!! backup_steps =  2000
#!! nu1          =  0.2
#!! nu2          =  0.1
#!! gamma_min    =  1e-12
#!! max_iters    =  15
#!! tol          =  1e-6
#!! pgrad        =  -5e-5

# Different preambles correspond to different materials
- n-050: |
         preamble: >
                   const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                   const nj            =   &nj&;
                   const ni            =   &ni&;
                   const nsteps        =   &nsteps&;
                   const pgrad         =   -1.7566e-5;   
                   const F             =   [-pgrad, 0.0]; 
                   const mu            =   &nu1&;
                   const n             =   0.5;
                   const forcing_kf    =   init_korner_Fk(F);
  n-075: |
         preamble: >
                   const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                   const nj            =   &nj&;
                   const ni            =   &ni&;
                   const nsteps        =   &nsteps&;
                   const pgrad         =   -1.44602e-5;   
                   const F             =   [-pgrad, 0.0]; 
                   const mu            =   &nu1&;
                   const n             =   0.75;
                   const forcing_kf    =   init_korner_Fk(F);
  n-125: |
         preamble: >
                   const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                   const nj            =   &nj&;
                   const ni            =   &ni&;
                   const nsteps        =   &nsteps&;
                   const pgrad         =   -1.01383395e-6;   
                   const F             =   [-pgrad, 0.0]; 
                   const mu            =   &nu1&;
                   const n             =   1.25;
                   const forcing_kf    =   init_korner_Fk(F);
  n-150: |
         preamble: >
                   const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                   const nj            =   &nj&;
                   const ni            =   &ni&;
                   const nsteps        =   &nsteps&;
                   const pgrad         =   -8.483548e-6;   
                   const F             =   [-pgrad, 0.0]; 
                   const mu            =   &nu1&;
                   const n             =   1.50;
                   const forcing_kf    =   init_korner_Fk(F);
  
- bgk:      "col_f: BGK_F(init_constit_srt_power_law_implicit(mu, n, &gamma_min&, &max_iters&, &tol&), forcing_kf)"
  svec:     "col_f: BGK_F(init_constit_srt_power_law_implicit(mu, n, 0.501, 10.0, &gamma_min&, &max_iters&, &tol&), forcing_kf)"
  bgk-fltr: "col_f: FltrStdCol(BGK_F(init_constit_srt_power_law_implicit(mu, n, &gamma_min&, &max_iters&, &tol&), forcing_kf; feq_f=feq_incomp_max_entropy))"
  mrt:      "col_f: MRT_F(init_constit_mrt_power_law_implicit(mu, n, &gamma_min&, &max_iters&, &tol&), forcing_kf)"

- "" : |
       datadir: {   value: datadir,       expr: true    }

       rho_0:   {   value: 1.0,           expr: false   }
       nu:      {   value: mu,            expr: true    }

       dx:      {   value: 1.0,           expr: false   }
       dt:      {   value: 1.0,           expr: false   }
       ni:      {   value:  ni,           expr: true    }
       nj:      {   value:  nj,           expr: true    }

       simtype:  default
       nsteps:   {   value: nsteps,        expr: true   }

       bcs:
         - north_bounce_back!
         - south_bounce_back!
         - periodic_east_to_west!

       callbacks:
         - print_step_callback(250)
         - write_jld_file_callback(datadir, &backup_steps&)
         - write_jld_file_callback(datadir, 5000, true)
       
       finally:
         - write_jld_file_callback(datadir)
         - report_lbm_error(nn -> analytical_poise_power_law(mu, n, pgrad, nn), 1, div(ni, 2), datadir)
         - >
           (sim, k) -> begin
             umax = maximum(analytical_poise_power_law(mu, n, pgrad, nj));
             info("Re = $(umax ^ (2 - n) * (nj ^ n) / mu)");
           end
         - >
           (sim, k) -> begin
             vpa = vel_prof_acsr(1, div(ni, 2), 1:nj);
             writedlm(joinpath(datadir, "ux_profile.dsv"), 
               begin
                 x, y = vpa(sim);
                 hcat(x, y);
               end,
               ",");
           end
