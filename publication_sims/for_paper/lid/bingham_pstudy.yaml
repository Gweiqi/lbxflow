- "": "version: 1.0.0"

#!! nj           =  100
#!! ni           =  100
#!! nsteps       =  50000
#!! backup_steps =  2000
#!! nu1          =  0.2
#!! nu2          =  0.1
#!! gamma_min    =  1e-12
#!! max_iters    =  15
#!! tol          =  1e-6
#!! pgrad        =  -1e-5

# Different preambles correspond to different materials
- tau-04: |
          preamble: >
                    const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                    const nj            =   &nj&;
                    const ni            =   &ni&;
                    const nsteps        =   &nsteps&;
                    const pgrad         =   &pgrad&;   
                    const F             =   [-pgrad, 0.0]; 
                    const mu            =   &nu1&;
                    const tauy          =   4e-5;
                    const forcing_kf    =   init_korner_Fk(F);
  tau-08: |
          preamble: >
                    const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                    const nj            =   &nj&;
                    const ni            =   &ni&;
                    const nsteps        =   &nsteps&;
                    const pgrad         =   &pgrad&;   
                    const F             =   [-pgrad, 0.0]; 
                    const mu            =   &nu1&;
                    const tauy          =   8e-5;
                    const forcing_kf    =   init_korner_Fk(F);
  tau-12: |
          preamble: >
                    const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                    const nj            =   &nj&;
                    const ni            =   &ni&;
                    const nsteps        =   &nsteps&;
                    const pgrad         =   &pgrad&;   
                    const F             =   [-pgrad, 0.0]; 
                    const mu            =   &nu1&;
                    const tauy          =   12e-5;
                    const forcing_kf    =   init_korner_Fk(F);

  tau-16: |
          preamble: >
                    const datadir       =   joinpath("data", "for_paper", ~DIR_LS~);
                    const nj            =   &nj&;
                    const ni            =   &ni&;
                    const nsteps        =   &nsteps&;
                    const pgrad         =   &pgrad&;   
                    const F             =   [-pgrad, 0.0]; 
                    const mu            =   &nu1&;
                    const tauy          =   16e-5;
                    const forcing_kf    =   init_korner_Fk(F);

- svec-1:       "col_f: BGK_F(init_constit_srt_bingham_implicit(mu, tauy, 1e8, 0.501, 8.0, &gamma_min&, &max_iters&, &tol&), forcing_kf)"
  svec-2:       "col_f: BGK_F(init_constit_srt_bingham_implicit(mu, tauy, 1e8, 0.510, 6.0, &gamma_min&, &max_iters&, &tol&), forcing_kf)"
  svec-3:       "col_f: BGK_F(init_constit_srt_bingham_implicit(mu, tauy, 1e8, 0.600, 4.0, &gamma_min&, &max_iters&, &tol&), forcing_kf)"
  mrt-fallah:   "col_f: MRT_F(init_constit_mrt_bingham_implicit(mu, tauy, 1e8, &gamma_min&, &max_iters&, &tol&), forcing_kf; S=S_fallah)"
  mrt-luo:      "col_f: MRT_F(init_constit_mrt_bingham_implicit(mu, tauy, 1e8, &gamma_min&, &max_iters&, &tol&), forcing_kf; S=S_luo)"

- "" : |
       datadir: {   value: datadir,       expr: true    }

       rho_0:   {   value: 1.0,           expr: false   }
       nu:      {   value: mu,            expr: true    }

       dx:      {   value: 1.0,           expr: false   }
       dt:      {   value: 1.0,           expr: false   }
       ni:      {   value:  ni,           expr: true    }
       nj:      {   value:  nj,           expr: true    }

       simtype:  default
       nsteps:   {   value: nsteps,        expr: true   }

       # boundary conditions
      bcs:
        - >
          begin;
            curry_lid_driven!(lat) = lid_driven!(lat, U);
            return curry_lid_driven!;
          end
        - south_bounce_back!
        - east_bounce_back!
        - west_bounce_back!

      # callback functions
      callbacks:
        - print_step_callback(100, id)
        - write_jld_file_callback(datadir, convert(Int, nsteps/100))

      # test for steady state
      test_for_term:          init_is_steadystate(1e-7)
      test_for_term_steps:    100

      # clean-up, backup, write out
      finally:
        - >
          (sim::Sim, k::Int) -> begin
            info("vortex(x, y) -> $(vortex_center(sim.msm))")
            const ni, nj = size(sim.msm.u, 2), size(sim.msm.u, 3);
            const xs = linspace(0, 1.0, ni);
            const ys = linspace(0, 1.0, nj);
            writedlm(joinpath(datadir, "u.dsv"), transpose(reshape(sim.msm.u[1,:,:], (ni, nj))), ",");
            writedlm(joinpath(datadir, "v.dsv"), transpose(reshape(sim.msm.u[2,:,:], (ni, nj))), ",");
            writedlm(joinpath(datadir, "u_midcav.dsv"), [vec(sim.msm.u[1,convert(Int, round(ni/2)),:]) ys], ",");
            writedlm(joinpath(datadir, "v_midcav.dsv"), [xs vec(sim.msm.u[2,:,convert(Int, round(nj/2))])], ",");
            PyPlot.clf();
            cs = PyPlot.contour(transpose(flow_ψ(sim.msm)));
            PyPlot.colorbar(cs);
            PyPlot.savefig(joinpath(datadir, "stream_function.png"));
            writedlm(joinpath(datadir, "streamfunction.dsv"), transpose(flow_ψ(sim.msm)));
          end
        - write_jld_file_callback(datadir)
        - plot_streamlines_callback(1, joinpath(datadir, "sl.png"), 0.0)
